{"version":3,"file":"static/webpack/static\\development\\pages\\certificate\\detail.js.4604fc8282f3664cb4df.hot-update.js","sources":["webpack:///./pages/certificate/detail.js"],"sourcesContent":["import React, {Component} from 'react';\r\nimport CertificateController from '../../interface/certificateController';\r\nimport HelperFunctions from '../../utils/constants';\r\nimport {Card, Grid, Button} from 'semantic-ui-react';\r\nimport {Link, Router} from '../../../routes';\r\nimport Layout from '../../components/Layout'\r\nimport web3 from \"../../interface/web3\";\r\n\r\n/**\r\n * Certificate details page\r\n */\r\n\r\nclass CertificateDetail extends Component {\r\n    state = {\r\n        loading: false,\r\n        errorMessage: '',\r\n        transactionHash : ''\r\n    };\r\n\r\n    static async getInitialProps(props) {\r\n        const certificate = await CertificateController.methods.getCertificateById(props.query.address).call();\r\n\r\n        let date = new Date(parseInt(certificate['4']));\r\n        const certificateDate = date.getFullYear() + \"-\" + date.getMonth() + \"-\" + date.getDate();\r\n\r\n        return {\r\n            address: props.query.address,\r\n            studentId: HelperFunctions.convertHexToString(certificate['0']),\r\n            courseId: HelperFunctions.convertHexToString(certificate['1']),\r\n            studentName: HelperFunctions.convertHexToString(certificate['2']),\r\n            courseName: HelperFunctions.convertHexToString(certificate['3']),\r\n            issuedDate: certificateDate,\r\n            isRevoked: certificate['5']\r\n        };\r\n    };\r\n\r\n    renderCertificateDetails() {\r\n        let validity;\r\n        const {\r\n            address,\r\n            studentId,\r\n            courseId,\r\n            studentName,\r\n            courseName,\r\n            issuedDate,\r\n            isRevoked\r\n        } = this.props;\r\n      if(!isRevoked){\r\n          validity = \"Valid\"\r\n      } else{\r\n          validity = \"Invalid\"\r\n      }\r\n\r\n        const items = [\r\n            {\r\n                header: address,\r\n                meta: 'Certificate ID',\r\n                style: {overflowWrap: 'break-word'}\r\n            },\r\n            {\r\n                header: studentName,\r\n                meta: 'Name of Student',\r\n                style: {overflowWrap: 'break-word'}\r\n            },\r\n            {\r\n                header: courseName,\r\n                meta: 'Name of Course',\r\n                style: {overflowWrap: 'break-word'}\r\n            },\r\n            {\r\n                header: studentId,\r\n                meta: 'Unique Id of Student',\r\n                style: {overflowWrap: 'break-word'}\r\n            },\r\n            {\r\n                header: courseId,\r\n                meta: 'Course Id',\r\n                style: {overflowWrap: 'break-word'}\r\n            },\r\n            {\r\n                header: issuedDate,\r\n                meta: 'Date of certificate',\r\n                style: {overflowWrap: 'break-word'}\r\n            },\r\n            {\r\n                header: validity,\r\n                meta: 'The Validity of Certificate',\r\n                style: {overflowWrap: 'break-word'}\r\n            },\r\n\r\n        ];\r\n\r\n        return <Card.Group style={{marginTop: '20px'}} items={items}/>\r\n    };\r\n\r\n    flipCertificateStatus = async (props) => {\r\n        let statusEvent;\r\n        const accounts = await web3.eth.getAccounts();\r\n        this.setState({loading: true, errorMessage: ''});\r\n        if (this.props.isRevoked) {\r\n            await CertificateController.methods\r\n                .enactCertificate(this.props.address)\r\n                .send({\r\n                    from: accounts[0]\r\n                }).on('transactionHash',(hash) =>{\r\n                    this.setState({transactionHash : 'https://rinkeby.etherscan.io/tx/'+hash})\r\n                }).on('confirmation', function () {\r\n                    console.log(\"Transaction confirmed\");\r\n                }).then(function (newCertificateInstance) {\r\n                    statusEvent = newCertificateInstance.events.CertificateEnacted;\r\n                });\r\n            this.setState({loading: false});\r\n            Router.pushRoute(`/certificate/${this.props.address}`);\r\n        } else {\r\n            await CertificateController.methods\r\n                .revokeCertificate(this.props.address)\r\n                .send({\r\n                    from: accounts[0]\r\n                }).on('transactionHash',(hash) =>{\r\n                    this.setState({transactionHash : 'https://rinkeby.etherscan.io/tx/'+hash})\r\n                }).on('confirmation', function () {\r\n                    console.log(\"Transaction confirmed\");\r\n                }).then(function (newCertificateInstance) {\r\n                    statusEvent = newCertificateInstance.events.CertificateEnacted;\r\n                });\r\n            this.setState({loading: false});\r\n            Router.pushRoute(`/certificate/${this.props.address}`);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let content;\r\n        if (this.props.isRevoked) {\r\n            content = 'Enact Certificate'\r\n        } else {\r\n            content = 'Revoke Certificate'\r\n        }\r\n        return (\r\n            <Layout>\r\n                <div style={{marginTop: '50px'}}>\r\n                    <Link route={`/`}>\r\n                        <a>\r\n                            Home\r\n                        </a>\r\n                    </Link>\r\n                    <h1>Certificate Details</h1>\r\n                </div>\r\n                {this.renderCertificateDetails()}\r\n                <div style={{paddingBottom: '100px'}}>\r\n                <Button\r\n                    loading={this.state.loading}\r\n                    onClick={this.flipCertificateStatus}\r\n                    floated=\"right\"\r\n                    content={content}\r\n                    icon='circle'\r\n                    primary/>\r\n                <div style={{marginTop: '40px'}}>\r\n                    { this.state.transactionHash ?  <a href={this.state.transactionHash} target=\"_blank\" >See transaction status on EtherScan</a> : null }\r\n                </div>\r\n                </div>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CertificateDetail;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAHA;AACA;;;;;;AAiFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAQA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAgBA;AAAA;AAAA;AACA;AAAA;AAjBA;AAAA;AACA;AADA;AAAA;AAAA;AAsBA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AA8BA;AAAA;AAAA;AACA;AAAA;AACA;AAhCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AA5DA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAqCA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAQA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;;;;;;AA/IA;;;;;;;AACA;AACA;;AADA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;;;;;;;;;;;;;;;;AAdA;AACA;AAwJA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}