{"version":3,"file":"static/webpack/static\\development\\pages\\certificate\\new.js.818b50907e48f9de9d0b.hot-update.js","sources":["webpack:///./pages/certificate/new.js"],"sourcesContent":["import React, {Component} from 'react'\r\nimport {Form, Button, Input, Message} from 'semantic-ui-react';\r\nimport {Link, Router} from '../../../routes';\r\nimport Layout from '../../components/Layout'\r\nimport CertificateController from '../../interface/certificateController';\r\nimport web3 from '../../interface/web3'\r\nimport HelperFunctions from '../../utils/constants'\r\n\r\n/**\r\n * New certificate page\r\n */\r\n\r\nclass CertificateNew extends Component {\r\n    state = {\r\n        studentId: '',\r\n        courseId: '',\r\n        studentName: '',\r\n        courseName: '',\r\n        errorMessage: '',\r\n        transactionHash : '',\r\n        loading: false\r\n    };\r\n\r\n    onFormSubmit = async (event) => {\r\n        let certificateAddress ;\r\n        event.preventDefault();\r\n        const {studentId, courseId, studentName, courseName} = this.state;\r\n        this.setState({loading: true, errorMessage: ''});\r\n\r\n        try {\r\n            const accounts = await web3.eth.getAccounts();\r\n            await CertificateController.methods\r\n                .issueCertificate(\r\n                    HelperFunctions.convertStringToHex(studentId),\r\n                    HelperFunctions.convertStringToHex(courseId),\r\n                    HelperFunctions.convertStringToHex(studentName),\r\n                    HelperFunctions.convertStringToHex(courseName),\r\n                    HelperFunctions.getUnixTime())\r\n                .send({\r\n                    from: accounts[0]\r\n                }).on('transactionHash',(hash) =>{\r\n                    this.setState({transactionHash : 'https://rinkeby.etherscan.io/tx/'+hash})\r\n                }).on('confirmation', function(){\r\n                console.log(\"Transaction confirmed\");\r\n            }).then(function (newCertificateInstance) {\r\n                   certificateAddress = newCertificateInstance.events.CertificateIssued.returnValues.certificateId;\r\n                });\r\n\r\n            Router.pushRoute(`/certificate/${certificateAddress}`);\r\n\r\n        } catch (e) {\r\n            this.setState({errorMessage: e.message});\r\n        }\r\n        this.setState({loading: false});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <div style={{marginTop: '50px'}}>\r\n                    <Link route={`/`}>\r\n                        <a>\r\n                            Back\r\n                        </a>\r\n                    </Link>\r\n                    <h2>Fill in the details of Certificate to issue</h2>\r\n                    <Form onSubmit={this.onFormSubmit} error={!!this.state.errorMessage}>\r\n                        <Form.Field>\r\n                            <label>Student ID</label>\r\n                            <Input\r\n                                required\r\n                                onChange={event => this.setState({studentId: event.target.value})}\r\n                                value={this.state.studentId}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Course ID</label>\r\n                            <Input\r\n                                required\r\n                                onChange={event => this.setState({courseId: event.target.value})}\r\n                                value={this.state.courseId}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Student Name</label>\r\n                            <Input\r\n                                required\r\n                                onChange={event => this.setState({studentName: event.target.value})}\r\n                                value={this.state.studentName}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Course Name</label>\r\n                            <Input\r\n                                required\r\n                                onChange={event => this.setState({courseName: event.target.value})}\r\n                                value={this.state.courseName}\r\n                            />\r\n                        </Form.Field>\r\n                        <Message error header='Oops!' content={this.state.errorMessage}/>\r\n                        <Button primary loading={this.state.loading}>Create!</Button>\r\n                    </Form>\r\n                    <div style={{marginTop: '20px'}}>\r\n                        { this.state.transactionHash ?  <a href={this.state.transactionHash} target=\"_blank\" >See transaction status on EtherScan</a> : null }\r\n                    </div>\r\n                </div>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CertificateNew;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;;;;;;AASA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;AAFA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAOA;AAPA;AAAA;AAgBA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AAyBA;AAzBA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AA2BA;AAAA;AAAA;AACA;AA7BA;AA8BA;AAAA;AAAA;AACA;AA/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAgCA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAMA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;;;;AAhGA;AACA;AAkGA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}