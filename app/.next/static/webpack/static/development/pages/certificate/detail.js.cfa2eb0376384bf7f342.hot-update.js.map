{"version":3,"file":"static/webpack/static/development/pages/certificate/detail.js.cfa2eb0376384bf7f342.hot-update.js","sources":["webpack:///./pages/certificate/detail.js"],"sourcesContent":["import React, {Component} from 'react';\nimport CertificateController from '../../interface/certificateController';\nimport HelperFunctions from '../../utils/constants';\nimport {Card, Grid, Button} from 'semantic-ui-react';\nimport {Link, Router} from '../../../routes';\nimport Layout from '../../components/Layout'\nimport web3 from \"../../interface/web3\";\n\n/**\n * Certificate details page\n */\n\nclass CertificateDetail extends Component {\n    state = {\n        loading: false,\n        errorMessage: '',\n        transactionHash : ''\n    };\n\n    static async getInitialProps(props) {\n        const certificate = await CertificateController.methods.getCertificateById(props.query.address).call();\n        let date = new Date(parseInt(certificate['5']));\n        const certificateDate = date.getFullYear() + \"-\" + date.getMonth() + \"-\" + date.getDate();\n        return {\n            address: props.query.address,\n            studentId: HelperFunctions.convertHexToString(certificate['0']),\n            courseId: HelperFunctions.convertHexToString(certificate['1']),\n            studentName: HelperFunctions.convertHexToString(certificate['2']),\n            courseName: HelperFunctions.convertHexToString(certificate['3']),\n            issuedDate: certificateDate,\n            isRevoked: certificate['6']\n        };\n    };\n\n    renderCertificateDetails() {\n        let validity;\n        const {\n            address,\n            studentId,\n            courseId,\n            studentName,\n            courseName,\n            issuedDate,\n            isRevoked\n        } = this.props;\n      if(!isRevoked){\n          validity = \"Valid\"\n      } else{\n          validity = \"Invalid\"\n      }\n\n        const items = [\n            {\n                header: address,\n                meta: 'Certificate ID',\n                style: {overflowWrap: 'break-word'}\n            },\n            {\n                header: studentName,\n                meta: 'Name of Student',\n                style: {overflowWrap: 'break-word'}\n            },\n            {\n                header: courseName,\n                meta: 'Name of Course',\n                style: {overflowWrap: 'break-word'}\n            },\n            {\n                header: studentId,\n                meta: 'Unique Id of Student',\n                style: {overflowWrap: 'break-word'}\n            },\n            {\n                header: courseId,\n                meta: 'Course Id',\n                style: {overflowWrap: 'break-word'}\n            },\n            {\n                header: issuedDate,\n                meta: 'Date of certificate',\n                style: {overflowWrap: 'break-word'}\n            },\n            {\n                header: validity,\n                meta: 'The Validity of Certificate',\n                style: {overflowWrap: 'break-word'}\n            },\n\n        ];\n\n        return <Card.Group style={{marginTop: '20px'}} items={items}/>\n    };\n\n    flipCertificateStatus = async (props) => {\n        let statusEvent;\n        const accounts = await web3.eth.getAccounts();\n        this.setState({ errorMessage: ''});\n        if (this.props.isRevoked) {\n            await CertificateController.methods\n                .enactCertificate(this.props.address)\n                .send({\n                    from: accounts[0]\n                }).on('transactionHash',(hash) =>{\n                    this.setState({transactionHash : 'https://rinkeby.etherscan.io/tx/'+hash ,lo})\n                }).on('confirmation', function () {\n                    console.log(\"Transaction confirmed\");\n                }).then(function (newCertificateInstance) {\n                    statusEvent = newCertificateInstance.events.CertificateEnacted;\n                });\n            this.setState({loading: false});\n            Router.pushRoute(`/certificate/${this.props.address}`);\n        } else {\n            await CertificateController.methods\n                .revokeCertificate(this.props.address)\n                .send({\n                    from: accounts[0]\n                }).on('transactionHash',(hash) =>{\n                    this.setState({transactionHash : 'https://rinkeby.etherscan.io/tx/'+hash})\n                }).on('confirmation', function () {\n                    console.log(\"Transaction confirmed\");\n                }).then(function (newCertificateInstance) {\n                    statusEvent = newCertificateInstance.events.CertificateEnacted;\n                });\n            this.setState({loading: false});\n            Router.pushRoute(`/certificate/${this.props.address}`);\n        }\n    };\n\n    render() {\n        let content;\n        if (this.props.isRevoked) {\n            content = 'Enact Certificate'\n        } else {\n            content = 'Revoke Certificate'\n        }\n        return (\n            <Layout>\n                <div style={{marginTop: '50px'}}>\n                    <Link route={`/`}>\n                        <a>\n                            Home\n                        </a>\n                    </Link>\n                    <h1>Certificate Details</h1>\n                </div>\n                {this.renderCertificateDetails()}\n                <div style={{paddingBottom: '100px'}}>\n                <Button\n                    loading={this.state.loading}\n                    onClick={this.flipCertificateStatus}\n                    floated=\"right\"\n                    content={content}\n                    icon='circle'\n                    primary/>\n                <div style={{marginTop: '40px'}}>\n                    { this.state.transactionHash ?  <a href={this.state.transactionHash} target=\"_blank\" >See transaction status on EtherScan</a> : null }\n                </div>\n                </div>\n            </Layout>\n        )\n    }\n}\n\nexport default CertificateDetail;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAHA;AACA;;;;;;AA+EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAQA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAgBA;AAAA;AAAA;AACA;AAAA;AAjBA;AAAA;AACA;AADA;AAAA;AAAA;AAsBA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AA8BA;AAAA;AAAA;AACA;AAAA;AACA;AAhCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AA5DA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAqCA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAQA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;;;;;;AA7IA;;;;;;;AACA;AACA;;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;;;;;;;;;;;;;;;;AAZA;AACA;AAsJA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}