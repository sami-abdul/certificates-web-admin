{"version":3,"file":"static/webpack/static/development/pages/certificate/new.js.fc7eec33eada11f229dc.hot-update.js","sources":["webpack:///./pages/certificate/new.js"],"sourcesContent":["import React, {Component} from 'react'\nimport {Form, Button, Input, Message} from 'semantic-ui-react';\nimport {Link, Router} from '../../../routes';\nimport Layout from '../../components/Layout'\nimport CertificateController from '../../interface/certificateController';\nimport web3 from '../../interface/web3'\nimport HelperFunctions from '../../utils/constants'\n\n/**\n * New certificate page\n */\n\nclass CertificateNew extends Component {\n    state = {\n        studentId: '',\n        courseId: '',\n        studentName: '',\n        courseName: '',\n        errorMessage: '',\n        transactionHash : '',\n        loading: false\n    };\n\n    onFormSubmit = async (event) => {\n        let certificateAddress ;\n        event.preventDefault();\n        const {studentId, courseId, studentName, courseName} = this.state;\n        this.setState({errorMessage: ''});\n         \n        try {\n            const accounts = await web3.eth.getAccounts();\n            await CertificateController.methods\n                .issueCertificate(\n                    HelperFunctions.convertStringToHex(studentId),\n                    HelperFunctions.convertStringToHex(courseId),\n                    HelperFunctions.convertStringToHex(studentName),\n                    HelperFunctions.convertStringToHex(courseName),\n                    HelperFunctions.getUnixTime())\n                .send({\n                    from: accounts[0]\n                }).on('transactionHash',(hash) =>{\n                    this.setState({transactionHash : 'https://rinkeby.etherscan.io/tx/'+hash, loading: true})\n                }).on('confirmation', function(){\n                console.log(\"Transaction confirmed\");\n            }).then(function (newCertificateInstance) {\n                   certificateAddress = newCertificateInstance.events.CertificateIssued.returnValues.certificateId;\n                });\n\n            Router.pushRoute(`/certificate/${certificateAddress}`);\n\n        } catch (e) {\n            this.setState({errorMessage: e.message});\n        }\n        this.setState({loading: false});\n    };\n\n    render() {\n        return (\n            <Layout>\n                <div style={{marginTop: '50px'}}>\n                    <Link route={`/`}>\n                        <a>\n                            Home\n                        </a>\n                    </Link>\n                    <h2>Fill in the details of Certificate to issue</h2>\n                    <Form onSubmit={this.onFormSubmit} error={!!this.state.errorMessage}>\n                        <Form.Field>\n                            <label>Student ID</label>\n                            <Input\n                                required\n                                onChange={event => this.setState({studentId: event.target.value})}\n                                value={this.state.studentId}\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                            <label>Course ID</label>\n                            <Input\n                                required\n                                onChange={event => this.setState({courseId: event.target.value})}\n                                value={this.state.courseId}\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                            <label>Student Name</label>\n                            <Input\n                                required\n                                onChange={event => this.setState({studentName: event.target.value})}\n                                value={this.state.studentName}\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                            <label>Course Name</label>\n                            <Input\n                                required\n                                onChange={event => this.setState({courseName: event.target.value})}\n                                value={this.state.courseName}\n                            />\n                        </Form.Field>\n                        <Message error header='Oops!' content={this.state.errorMessage}/>\n                        <Button primary loading={this.state.loading}>Create!</Button>\n                    </Form>\n                    <div style={{marginTop: '20px'}}>\n                        { this.state.transactionHash ?  <a href={this.state.transactionHash} target=\"_blank\" >See transaction status on EtherScan</a> : null }\n                    </div>\n                </div>\n            </Layout>\n        )\n    }\n}\n\nexport default CertificateNew;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;;;;;;AASA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;AAFA;AACA;AAGA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AACA;AADA;AAOA;AAPA;AAAA;AAgBA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AAyBA;AAzBA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AA2BA;AAAA;AAAA;AACA;AA7BA;AA8BA;AAAA;AAAA;AACA;AA/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAgCA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAMA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;;;;AAhGA;AACA;AAkGA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}