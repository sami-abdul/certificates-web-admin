{"version":3,"file":"static/webpack/static/development/pages/index.js.d21d2822ad149ae6d864.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, {Component} from 'react';\nimport CertificateController from '../interface/certificateController';\nimport {Card, Button, Form, Input, Message, Select , Header } from 'semantic-ui-react';\nimport {Link} from '../../routes'\nimport Layout from '../components/Layout'\nimport HelperFunctions from \"../utils/constants\";\n\n/**\n * Home page\n */\n\nclass StudentCertificateIndex extends Component {\n\n    state = {\n        idType: 'studentId',\n        loading: false,\n        idValue: '',\n        errorMessage: '',\n        searchedCertificate: {},\n        isCertificateFetched: false\n    };\n\n    onSearch = async (event) => {\n        event.preventDefault();\n        let certificate = null;\n        this.setState({loading: true, errorMessage: '', isCertificateFetched: false});\n        try {\n            if (this.state.idType === 'studentId') {\n                certificate = await CertificateController.methods.getCertificateByStudentId(HelperFunctions.convertStringToHex(this.state.idValue)).call();\n                if (certificate['0'].length === 0) {\n                    this.setState({errorMessage: \"Record not found\"});\n                } else {\n                    this.setState({searchedCertificate: certificate, isCertificateFetched: true})\n                }\n            } else {\n                certificate = await CertificateController.methods.getCertificateById(this.state.idValue).call();\n                if (certificate['4'] === '0') { // The response is null\n                    this.setState({errorMessage: \"Record not found\"});\n                } else {\n                    this.setState({searchedCertificate: certificate, isCertificateFetched: true})\n                }\n            }\n        } catch (e) {\n            this.setState({errorMessage: e.message});\n        }\n        this.setState({loading: false});\n\n    };\n\n    renderCertificates = (certificates) => {\n        let items = [];\n        if (this.state.idType === 'studentId') {\n            for (let i = 0; i < certificates['0'].length; i++) {\n                items.push({\n                    header: HelperFunctions.convertHexToString(certificates['2'][i]),\n                    description: (\n                        <Link route={`/certificate/${certificates['0'][i]}`}>\n                            <a>\n                                View Certificate\n                            </a>\n                        </Link>\n                    ),\n                    fluid: true\n                });\n            }\n        } else {\n            items.push({\n                header: HelperFunctions.convertHexToString(certificates['2']),\n                description: (\n                    <Link route={`/certificate/${this.state.idValue}`}>\n                        <a>\n                            View Certificate\n                        </a>\n                    </Link>\n                ),\n                fluid: true\n            });\n        }\n        return <Card.Group items={items}/>\n    };\n\n    render() {\n        const options = [\n            {key: 'certificateId', text: 'Certificate ID', value: 'certificateId'},\n            {key: 'studentId', text: 'Student ID', value: 'studentId'},\n\n        ];\n        return (\n            <Layout>\n                <Form onSubmit={this.onSearch}>\n                    <Input\n                        style={{marginTop: '50px'}}\n                        type='text'\n                        size=\"massive\"\n                        onChange={event => this.setState({idValue: event.target.value})}\n                        value={this.state.idValue}\n                        fluid\n                        placeholder='Search Certificate by...'\n                        action>\n                        <input/>\n                        <Select compact options={options} defaultValue={this.state.idType}\n                                onChange={(e, {value}) => this.setState({idType: value, isCertificateFetched: false ,errorMessage : ''})}/>\n                        <Button type='submit'>Search</Button>\n                    </Input>\n                </Form>\n\n                <Link route='/certificate/new'>\n                    <div style={{marginTop: '40px'}} error={!!this.state.errorMessage}>\n\n                        {this.state.errorMessage ? <Message error header=\"Oops!\" content={this.state.errorMessage}/> : null}\n\n                        <a>\n                            <Button\n                                floated=\"right\"\n                                content='Issue Certificate'\n                                icon='add circle'\n                                primary/>\n                        </a>\n                    </div>\n                </Link>\n                <div style={{marginTop: '100px'}}>\n                    {this.state.isCertificateFetched ? this.renderCertificates(this.state.searchedCertificate) : null}\n                </div>\n                <div style={{marginTop: '250px'}}>\n                {!this.state.isCertificateFetched ? <Header as='h1'  size=\"massive\"  textAlign=\"center\" fluid disabled>\n                    No certificates to show. <br/>Please use search.\n                </Header> : null}\n                </div>\n            </Layout>\n        )\n    }\n}\n\nexport default StudentCertificateIndex;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAMA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAZA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAaA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAnBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAoBA;AAAA;AAAA;AACA;AAtBA;AAuBA;AAAA;AAAA;AACA;AAxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AA0BA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AATA;AAWA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AAvHA;AACA;AAyHA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}