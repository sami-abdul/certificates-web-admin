{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.24df9ead5a03878c0bf8.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, {Component} from 'react';\r\nimport CertificateController from '../interface/certificateController';\r\nimport web3 from '../interface/web3';\r\nimport {Card, Button, Table, Form, Input, Message, Select} from 'semantic-ui-react';\r\nimport {Link} from '../../routes'\r\nimport Layout from '../components/Layout'\r\nimport HelperFunctions from \"../utils/constants\";\r\n\r\nclass StudentCertificateIndex extends Component {\r\n\r\n    state = {\r\n        idType: 'studentId',\r\n        loading: false,\r\n        idValue: '',\r\n        errorMessage: '',\r\n        searchedCertificate: {},\r\n        isCertificateFetched: false\r\n    };\r\n\r\n    onSearch = async (event) => {\r\n        event.preventDefault();\r\n        let certificate = null;\r\n        this.setState({loading: true, errorMessage: ''});\r\n        try {\r\n            if (this.state.idType === 'studentId') {\r\n                certificate = await CertificateController.methods.getCertificateByStudentId(HelperFunctions.convertStringToHex(this.state.idValue)).call();\r\n                console.log(certificate)\r\n                this.setState({searchedCertificate: certificate, isCertificateFetched: true})\r\n            } else {\r\n                certificate = await CertificateController.methods.getCertificateById(this.state.idValue).call();\r\n                if (certificate['4'] === '0') { // The response is null\r\n                    this.setState({errorMessage: \"Record not found\"});\r\n                } else {\r\n                    this.setState({searchedCertificate: certificate, isCertificateFetched: true})\r\n\r\n                }\r\n            }\r\n        } catch (e) {\r\n            this.setState({errorMessage: e.message});\r\n        }\r\n        this.setState({loading: false});\r\n\r\n    };\r\n\r\n    renderCertificates = (certificates) => {\r\n        let items = [];\r\n        if (this.state.idType === 'studentId') {\r\n            for (let i = 0; i < certificates['0'].length; i++) {\r\n                items.push({\r\n                    header: certificates['0'][i],\r\n                    description: (\r\n                        <Link route={`/certificate/${certificates['0'][i]}`}>\r\n                            <a>\r\n                                View Certificate\r\n                            </a>\r\n                        </Link>\r\n                    ),\r\n                    fluid: true\r\n                });\r\n            }\r\n        } else {\r\n            items.push({\r\n                header: HelperFunctions.convertHexToString(certificates['2']),\r\n                description: (\r\n                    <Link route={`/certificate/${this.state.idValue}`}>\r\n                        <a>\r\n                            View Certificate\r\n                        </a>\r\n                    </Link>\r\n                ),\r\n                fluid: true\r\n            });\r\n        }\r\n\r\n        return <Card.Group items={items}/>\r\n\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n        const options = [\r\n            {key: 'studentId', text: 'Student ID', value: 'studentId'},\r\n            {key: 'certificateId', text: 'Certificate ID', value: 'certificateId'}\r\n        ];\r\n        return (\r\n            <Layout>\r\n                <Form onSubmit={this.onSearch} >\r\n                    <Input\r\n                        style={{marginTop: '50px'}}\r\n                        type='text'\r\n                        size=\"massive\"\r\n                        onChange={event => this.setState({idValue: event.target.value})}\r\n                        value={this.state.idValue}\r\n                        fluid\r\n                        placeholder='Search Certificate by...'\r\n                        action>\r\n                        <input/>\r\n                        <Select compact options={options} defaultValue={this.state.idType}\r\n                                onChange={(e, {value}) => this.setState({idType: value, isCertificateFetched: false})}/>\r\n                        <Button type='submit'>Search</Button>\r\n                    </Input>\r\n                </Form>\r\n\r\n                <Link route='/certificate/new' >\r\n                    <div style={{marginTop: '40px'}} error={!!this.state.errorMessage}>\r\n\r\n                        {this.state.errorMessage ? <Message error header=\"Oops!\" content={this.state.errorMessage}/> : null}\r\n\r\n\r\n                        <a>\r\n                            <Button\r\n                                floated=\"right\"\r\n                                content='Issue Certificate'\r\n                                icon='add circle'\r\n                                primary/>\r\n                        </a>\r\n                    </div>\r\n                </Link>\r\n                <div style={{marginTop: '100px'}}>\r\n                    {this.state.isCertificateFetched ? this.renderCertificates(this.state.searchedCertificate) : null}\r\n                </div>\r\n            </Layout>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default StudentCertificateIndex;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AATA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAUA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAjBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAkBA;AAAA;AAAA;AACA;AApBA;AAqBA;AAAA;AAAA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAwBA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AATA;AAWA;AACA;AACA;AAAA;AAAA;AAGA;AACA;;;;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AAAA;AAAA;AAKA;;;;AApHA;AACA;AAwHA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}